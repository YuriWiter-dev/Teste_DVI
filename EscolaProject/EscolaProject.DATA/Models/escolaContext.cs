// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace EscolaProject.DATA.Models
{
    public partial class escolaContext : DbContext
    {
        public escolaContext()
        {
        }

        public escolaContext(DbContextOptions<escolaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Aluno> Aluno { get; set; }
        public virtual DbSet<Materia> Materia { get; set; }
        public virtual DbSet<Notas> Notas { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {

                IConfigurationRoot configuration = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

                var stringConexao = configuration.GetConnectionString("Homologacao");

                optionsBuilder.UseSqlServer(stringConexao);


            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Aluno>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Email).IsFixedLength();

                entity.Property(e => e.NomeAluno).IsFixedLength();
            });

            modelBuilder.Entity<Materia>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Descricao).IsFixedLength();

                entity.Property(e => e.NomeMateria).IsFixedLength();
            });

            modelBuilder.Entity<Notas>(entity =>
            {
                entity.ToTable("Notas");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Materia)
                    .WithOne(p => p.Notas)
                    .HasForeignKey<Notas>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notas_Aluno");

                entity.HasOne(d => d.Aluno)
                    .WithOne(p => p.Notas)
                    .HasForeignKey<Notas>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notas_Materia");
            });

            modelBuilder.Entity<MateriaAluno>(entity =>
            {
                entity.ToTable("materia_aluno");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                                
                entity.HasOne(c => c.Materia)
                    .WithMany(c => c.MateriasAlunos)
                    .HasForeignKey(c => c.IdMateria)
                    .HasPrincipalKey(c => c.Id)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(c => c.Aluno)
                    .WithMany(c => c.MateriasAlunos)
                    .HasForeignKey(c => c.IdAluno)
                    .HasPrincipalKey(c => c.Id)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}